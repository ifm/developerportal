<?php 

$debug = false;

include('Parsedown.php');
$Parsedown = new Parsedown();

//Get Provided URL, verify its a github url, and parse the url to markdown
$base_md_file = 'https://raw.githubusercontent.com/ifm/documentation/lm_table_of_content/O3R/README.md';
$parse_contents_url = parse_url($base_md_file);
$path_array = explode('/',$parse_contents_url['path']);

//Get parts of the path array, and set base_info
$base_info['base_url'] = $parse_contents_url['scheme'].'://'.$parse_contents_url['host'];
$base_info['base_username'] = $path_array[1];
$base_info['base_repo_name'] = $path_array[2];
$base_info['base_repo'] = $base_info['base_username'] . '/' .  $base_info['base_repo_name'];
$base_info['base_branch'] = $path_array[3];
$base_info['base_file'] = end($path_array);
$base_info['temp_parent_folder'] = '';

//If Path array is > 4, set base_sub_folder to the 4th path and then define base_full_url
if(count($path_array) > 4){
    $base_info['base_sub_folder'] = $path_array[4];
    $base_info['base_full_url'] = $base_info['base_url'].'/'.$base_info['base_repo'].'/'.$base_info['base_branch'].'/'.$base_info['base_sub_folder'];
}else{
    $base_info['base_full_url'] = $base_info['base_url'].'/'.$base_info['base_repo'].'/'.$base_info['base_branch'];
}

//Get MD from base file
$main_md = return_md($base_md_file,$Parsedown);

//Set json items to recursive function to build the json items.
$json_array['items'] = rec_build_array($base_info,$main_md,$Parsedown);


//If debug (at top of file) is true, then dont write to file, and echo json. Else write to json file.
if($debug == true){
    //Debug json data
    echo('<br /><br />');
    $json = json_encode($json_array);
    echo($json);
}else{
    //write to file
    $json = json_encode($json_array);
    $file = fopen('../jquery/menu.json','w+') or die("File not found");
    fwrite($file, $json);
    fclose($file);
}

//Resursive function to build items for json menu array
function rec_build_array($base_info,$md,$Parsedown){
    //Create empty array for all items to be pushed to
    $items_array = array();
    //Check if table of contents exists in file
    $table_check = check_for_table($md);

    //If table of contents exists in file, start building the mneu
    if($table_check){

        //Find the first table, access the tbody of that table, and remove the first and last item of it (empty row generated by markdown structure)
        $main_table = get_string_between($md, '<table>', '</table>');
        $main_table_body = get_string_between($main_table, '<tbody>', '</tbody>');
        $main_table_body_list = explode('<td>',$main_table_body);
        array_shift($main_table_body_list);


        //For each row/td in the table, loop through and build the item array
        foreach ($main_table_body_list as $list_item) {
            
            //remove the trailing </td> from the item;
            $list_item = str_replace('</td>','',$list_item);
            
            //Set Blank Vars
            $item_array = array();
            $item_url = '';
            $item_name = '';
            $item_has_children = '';
            $item_sub_folder = '';
            $item_type = '';
            $item_repo = '';
            $item_branch = '';
            $item_file = '';
            $item_parent_folder = '';


            //Get the name, and url fomr MD
            $item_name = get_string_between($list_item,'">','</');
            $list_item_url = get_string_between($list_item,'href="','"');

            //If List Item Url is linking to a MD file, else set it to an external file.
            if(strpos($list_item_url,'.md') !== false){

                //Set Vars
                $item_array['name'] = $item_name;
                $item_type = 'doc_readme';
                $item_repo = $base_info['base_repo'];
                $item_branch = $base_info['base_branch'];
                
                //Remove all "../" from the url. Turn new url string in to an array of parts.
                $list_item_url = str_replace('../','',$list_item_url);
                $list_item_url_array = explode('/',$list_item_url);
                
                //Remove the last element (the .md file) and create folder structure based on the array
                $item_rd_file = array_pop($list_item_url_array);
                $item_parent_folder = join('/', $list_item_url_array);

                //Set item file to the full path to the .md file
                $item_file = $base_info['base_full_url']. '/' .$item_parent_folder. '/'. $item_rd_file;

                //Set $item_array vars to the specific items vars
                $item_array['type'] = $item_type;
                $item_array['repo'] = $item_repo;
                $item_array['branch'] = $item_branch;
                $item_array['file'] = $item_rd_file;
                $item_array['parent_folder'] = $item_parent_folder;
                $item_array['repo_sub_folder'] = $base_info['base_sub_folder'];


                //get Md of the new file.
                $md = return_md($item_file,$Parsedown);


                //Check if it has children, if it does, start recursion, and set vars
                $children = rec_build_array($base_info,$md,$Parsedown);
                if($children){
                    $item_has_children = true;
                    $item_array['has_children'] = $item_has_children;
                    $item_array['children'] = $children;
                }
            }else{//Sett external link vars, if not .md file
                $item_array['name'] = $item_name;
                $item_type = 'ex';
                $item_url = $list_item_url;
            }

            //Push item array to all items array for json encoding
            array_push($items_array, $item_array);        
        }

        //Return all $items_array to the json items array near the top.
        return $items_array;
    }else{
        return false;
    }

    
}

//Gets the string between two other strings
function get_string_between($string, $start, $end){
    $ini = strpos($string, $start);
    if ($ini == 0) return '';
    $ini += strlen($start);
    $len = strpos($string, $end, $ini) - $ini;
    return substr($string, $ini, $len);
}

//Gets the MD and returns it.
function return_md($url,$Parsedown){
    
    $contents = file_get_contents($url.'?flush_cache=True');
    $md = $Parsedown->text($contents);

    return $md;
}

//Function to get the first table and check if it has the string "Table of content" anywhere in it, if it does return true, if not return false.
function check_for_table($md){
    $table_check = get_string_between($md, '<table>', '</table>');
    
    if(strpos($table_check, 'Table of content') !== false){
        $table_check = true;
    }else{
        $table_check = false;
    }

    return $table_check;
}
?>